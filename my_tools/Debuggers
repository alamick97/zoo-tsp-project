//DEBUGGER START=======================================================
//std::cout << "====================================================\n";
std::cout << "round: " << true_count << "\n";
for (uint32_t id = 0; id < _num_vertices; ++id) {
	primsTable row = _primsTable[id];
	std::cout << "id: " << id << " | kv: " <<  row.kv << " | dv: " << row.dv << "|\n";
}
std::cout << "====================================================\n";
//DEBUGGER END=======================================================




//DEBUGGER START=======================================================
//std::cout << "====================================================\n";
std::cout << "round: " << true_count << "\n";
uint32_t a = 0;
for (auto& vertex : _vertices) {
//	std::cout << "x: " << vertex.x << " y: " << vertex.y << " cat: " << vertex.cat << "\n";	
	//std::cout << "x: " << vertex.x << " y: " << vertex.y << " cat: ";
	std::cout << "id: " << a << " cat: ";
	a++;
	if (vertex.cat == Category::Wild) {
		std::cout << "wild";
	} else if (vertex.cat == Category::Safe) {
		std::cout << "safe";
	} else if (vertex.cat == Category::WallCage) {
		std::cout << "wall cage.";
	}
	std::cout << "\n";
}
std::cout << "====================================================\n";
//DEBUGGER END=======================================================




//for Zoo::primsLinear()
//std::cout << "round count: " << true_count << "\n";
		//find smallest dist
		for (uint32_t i = 0; i < _num_vertices; i++) {
//std::cout << "i: " << i << "\n";
			if (_primsTable[i].kv == false) {
//std::cout << "prims is false\n";
//std::cout << "dv: " << _primsTable[i].dv << "\n";
				if (_primsTable[i].dv < minDist) {
//std::cout << "dv is less than minDist\n";
					minDist = _primsTable[i].dv;
					id = i;
				}
			}
//std::cout << "minDist: " << minDist << "\n";
		}


//std::cout << "id: " << id << "\n"; //DEBUGGER
		//update table (set smallest to T). update k
		_primsTable[id].kv = true;
		true_count++;
		_dv_sum += _primsTable[id].dv;
//std::cout << "addedDist: " << _primsTable[id].dv << "\n";

		//update dv,pv (for id, if find smaller dist, overwrite dv * pv)
		for (uint32_t i = 0; i < _num_vertices; i++) {
			if (_primsTable[i].kv == false) {
				Vertex v1 = _vertices[i];
				Vertex v2 = _vertices[id];
				if (!((v1.cat == Category::Safe && v2.cat == Category::Wild) ||
					(v1.cat == Category::Wild && v2.cat == Category::Safe))) {
						double oldDist = _primsTable[i].dv;
//std::cout << "oldDist: " << oldDist << "\n";
						double newDist = getDistance(v1, v2);
//std::cout << "newDist: " << newDist << "\n";
						if (newDist < oldDist) { 
							_primsTable[i].dv = newDist; 
							if (id != _arbitrary_root_id) { _primsTable[i].pv = id; }
						}
				}
			}
		}



//for printing prim's table vector by row
//DEBUGGER START=======================================================
for (uint32_t id = 0; id < _num_vertices; ++id) {
	primsTable row = _primsTable[id];
	std::cout << "id: " << id << " | kv: " <<  row.kv << " | dv: " << row.dv << "|\n";
}
//DEBUGGER END=======================================================



void Zoo::readInput() {
	//TODO: Implement using cin.
	uint32_t numVertices;
	int x, y;

	std::cin >> numVertices;
	for (uint32_t i = 0; i < numVertices; ++i) {
		std::cin >> x >> y;
		std::cout << "(" << x << ", " << y << ")\n";
	}
}


//added 11/25/2023, 19:05
void Zoo::readInput() {
	uint32_t numVertices;
	int x, y;

	std::cin >> numVertices;
	std::vector<Vertex> vertices(numVertices);	

	for (uint32_t i = 0; i < numVertices; ++i) {
		std::cin >> x >> y;
		Category cat = getCategory(x, y);
		vertices.emplace_back(Vertex{x, y, i, cat});

		std::cout << i << ": (" << x << ", " << y << ")\n";
	}

} //readInput()